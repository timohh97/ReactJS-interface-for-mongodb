{"version":3,"sources":["PostAndroid.js","Android.js","PostPerson.js","Person.js","PostMessenger.js","Messenger.js","PostTest.js","Test.js","Database.js","App.js","serviceWorker.js","index.js"],"names":["PostAndroid","props","changeHandler","e","setState","target","name","value","submitHandler","preventDefault","console","log","state","axios","post","username","email","password","repeat","this","onSubmit","type","placeholder","onChange","Component","Android","documents","fetch","then","response","json","data","id","map","item","JSON","stringify","PostPerson","firstName","lastName","age","birthday","job","description","Person","PostMessenger","Messenger","PostTest","TestData","Databases","settings","dots","infinite","speed","slidesToShow","slidesToScroll","Test","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.87a83a42.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport './postStyle.css'\r\n\r\n\r\nexport default class PostAndroid extends Component{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n\r\n        this.state ={\r\n            username:'',\r\n            email:'',\r\n            password:'',\r\n            repeat:''\r\n        }\r\n    }\r\n\r\n   changeHandler = (e)=>\r\n   {\r\n        this.setState({[e.target.name]: e.target.value})\r\n   }\r\n\r\n   submitHandler = e =>{\r\n       e.preventDefault()\r\n       console.log(this.state)\r\n       axios.post('https://android-restapi.herokuapp.com/',this.state)\r\n\r\n   }\r\n\r\n    render()\r\n    {\r\n        const {username,email,password,repeat} = this.state\r\n\r\n        return(\r\n            <div>\r\n            <form onSubmit={this.submitHandler}>   \r\n                <input type=\"text\" name=\"username\" placeholder=\"New username\" value={username} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <input type=\"text\" name=\"email\" placeholder=\"Email\" value={email} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <input type=\"password\" name=\"password\" placeholder=\"Password\" value={password} onChange={this.changeHandler}></input>\r\n                 <br></br>\r\n                <input type=\"password\" name=\"repeat\" placeholder=\"Repeat password\" value={repeat} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <button type=\"submit\">Put into database</button>    \r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport './database.css';\r\nimport PostAndroid from './PostAndroid.js';\r\n\r\n\r\n\r\n\r\nclass Android extends Component {\r\n\r\n\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n\r\n      documents: []\r\n\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    fetch('https://android-restapi.herokuapp.com/')\r\n      .then(response => response.json())\r\n      .then(data =>\r\n        this.setState({\r\n          documents: data\r\n        }\r\n        )\r\n\r\n      );\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state)\r\n    return (<div id=\"container\"><br></br>\r\n      <PostAndroid />\r\n      <div><h1 id=\"header\">Android database</h1><br></br>\r\n        {this.state.documents.map(item => {\r\n\r\n          return (<div id=\"document\">\r\n            <p>{JSON.stringify(item)}</p>\r\n          </div>\r\n          )\r\n\r\n        })}<br></br>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Android;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default class PostPerson extends Component{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n\r\n        this.state ={\r\n            firstName:'',\r\n            lastName:'',\r\n            age:'',\r\n            birthday:'',\r\n            job:'',\r\n            description:''\r\n        }\r\n    }\r\n\r\n   changeHandler = (e)=>\r\n   {\r\n        this.setState({[e.target.name]: e.target.value})\r\n   }\r\n\r\n   submitHandler = e =>{\r\n       e.preventDefault()\r\n       console.log(this.state)\r\n       axios.post('https://timoschessl-restapi-mongodb.herokuapp.com/post',this.state)\r\n\r\n   }\r\n\r\n    render()\r\n    {\r\n        const {firstName,lastName,age,birthday,job,description} = this.state\r\n\r\n        return(\r\n\r\n            <div>\r\n            <form onSubmit={this.submitHandler}>\r\n               \r\n                <input type=\"text\" name=\"firstName\" placeholder=\"First name\" value={firstName} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <input type=\"text\" name=\"lastName\" placeholder=\"Last name\" value={lastName} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <input type=\"text\" name=\"age\" placeholder=\"Age\" value={age} onChange={this.changeHandler}></input>\r\n                 <br></br>\r\n                 <input type=\"text\" name=\"birthday\" placeholder=\"Birthday\" value={birthday} onChange={this.changeHandler}></input>\r\n                 <br></br>\r\n                <input type=\"text\" name=\"job\" placeholder=\"Job\" value={job} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <input type=\"text\" name=\"description\" placeholder=\"Description\" value={description} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <button type=\"submit\">Put into database</button>    \r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './database.css';\r\nimport PostPerson from './PostPerson'\r\n\r\n\r\nclass Person extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n\r\n      documents: []\r\n\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    fetch('https://timoschessl-restapi-mongodb.herokuapp.com/get')\r\n      .then(response => response.json())\r\n      .then(data =>\r\n        this.setState({\r\n          documents: data\r\n        }\r\n        )\r\n        \r\n      );\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state)\r\n    return (<div id=\"container\">\r\n      <br></br>\r\n      <PostPerson/>\r\n    <div><h1 id=\"header\">Person database</h1>\r\n      <br></br>\r\n      {this.state.documents.map(item => {\r\n\r\n        return (<div id=\"document\">\r\n          <p>{JSON.stringify(item)}</p>\r\n        </div>\r\n        )\r\n\r\n      })}<br></br>\r\n    </div>\r\n</div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Person;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default class PostMessenger extends Component{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n\r\n        this.state ={\r\n            username:'',\r\n            email:'',\r\n            password:'',\r\n            repeat:''\r\n        }\r\n    }\r\n\r\n   changeHandler = (e)=>\r\n   {\r\n        this.setState({[e.target.name]: e.target.value})\r\n   }\r\n\r\n   submitHandler = e =>{\r\n       e.preventDefault()\r\n       console.log(this.state)\r\n       axios.post('https://restapits.herokuapp.com/',this.state)\r\n\r\n   }\r\n\r\n    render()\r\n    {\r\n        const {username,email,password,repeat} = this.state\r\n\r\n        return(\r\n\r\n            <div>\r\n            <form onSubmit={this.submitHandler}>\r\n               \r\n                <input type=\"text\" name=\"username\" placeholder=\"New username\" value={username} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <input type=\"text\" name=\"email\" placeholder=\"Email\" value={email} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <input type=\"password\" name=\"password\" placeholder=\"Password\" value={password} onChange={this.changeHandler}></input>\r\n                 <br></br>\r\n                <input type=\"password\" name=\"repeat\" placeholder=\"Repeat password\" value={repeat} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <button type=\"submit\">Put into database</button>    \r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './database.css';\r\nimport PostMessenger from './PostMessenger'\r\n\r\n\r\nclass Messenger extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n\r\n      documents: []\r\n\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    fetch('https://restapits.herokuapp.com/')\r\n      .then(response => response.json())\r\n      .then(data =>\r\n        this.setState({\r\n          documents: data\r\n        }\r\n        )\r\n        \r\n      );\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state)\r\n    return (<div id=\"container\">\r\n     <br></br>\r\n      <PostMessenger />\r\n      \r\n      <div><h1 id=\"header\">Messenger database</h1><br></br>\r\n        {this.state.documents.map(item => {\r\n\r\n          return (<div id=\"document\">\r\n            <p>{JSON.stringify(item)}</p>\r\n          </div>\r\n          )\r\n          \r\n        })}<br></br>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Messenger;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default class PostTest extends Component{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n\r\n        this.state ={\r\n            firstName:'',\r\n            lastName:'',\r\n            age:'',\r\n            job:'',\r\n            description:''\r\n        }\r\n    }\r\n\r\n   changeHandler = (e)=>\r\n   {\r\n        this.setState({[e.target.name]: e.target.value})\r\n   }\r\n\r\n   submitHandler = e =>{\r\n       e.preventDefault()\r\n       console.log(this.state)\r\n       axios.post('https://timoschessl-springboot.herokuapp.com/post',this.state)\r\n\r\n   }\r\n\r\n    render()\r\n    {\r\n        const {firstName,lastName,age,job,description} = this.state\r\n\r\n        return(\r\n\r\n            <div>\r\n            <form onSubmit={this.submitHandler}>\r\n                <input type=\"text\" name=\"firstName\" placeholder=\"First name\" value={firstName} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <input type=\"text\" name=\"lastName\" placeholder=\"Last name\" value={lastName} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <input type=\"text\" name=\"age\" placeholder=\"Age\" value={age} onChange={this.changeHandler}></input>\r\n                 <br></br>\r\n                <input type=\"text\" name=\"job\" placeholder=\"Job\" value={job} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <input type=\"text\" name=\"description\" placeholder=\"Description\" value={description} onChange={this.changeHandler}></input>\r\n                <br></br>\r\n                <button type=\"submit\">Put into database</button>    \r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './database.css';\r\nimport PostTest from './PostTest'\r\n\r\n\r\nclass TestData extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n\r\n      documents: []\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  componentDidMount() {\r\n\r\n    fetch('https://timoschessl-springboot.herokuapp.com/')\r\n      .then(response => response.json())\r\n      .then(data =>\r\n        this.setState({\r\n\r\n          documents: data\r\n        })\r\n\r\n      )\r\n\r\n\r\n      ;\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    console.log(this.state)\r\n    return (<div id=\"container\"><br></br>\r\n\r\n      <PostTest />\r\n      <div><h1 id=\"header\">Test database</h1><br></br>\r\n        {this.state.documents.map(item => {\r\n\r\n          return (<div id=\"document\">\r\n            <p>{JSON.stringify(item)}</p>\r\n          </div>\r\n          )\r\n\r\n        })}<br></br>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default TestData;","import React, { Component } from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport 'slick-carousel/slick/slick-theme.css';\r\nimport 'slick-carousel/slick/slick.css';\r\nimport Android from './Android'\r\nimport Person from './Person'\r\nimport Messenger from './Messenger'\r\nimport TestData from './Test'\r\nimport './App.css'\r\n\r\n\r\nexport default class Databases extends Component {\r\n  render() {\r\n    const settings = {\r\n      dots: false,\r\n      infinite: true,\r\n      speed: 500,\r\n      slidesToShow: 3,\r\n      slidesToScroll: 1\r\n    };\r\n    return (\r\n      <div>\r\n        <h1>React Interface for mongoDB databases</h1>\r\n        <Slider {...settings}>\r\n          <div>\r\n            <Android/>\r\n          </div>\r\n          <div>\r\n            <Person/>\r\n          </div>\r\n          <div>\r\n            <Messenger/>\r\n          </div>\r\n          <div>\r\n            <TestData/>\r\n          </div>\r\n          </Slider>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\nimport Databases from './Database';\nimport './App.css'\n\nexport default class App extends Component {\n\n\n    render() {\n        return (\n       \n            \n            <div>\n             <Databases/>\n            </div>\n            \n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}